1)
let rec check_dupplicate value list = match list with 
    [] -> false|
    a::b -> if value == a then true else check_dupplicate value b;;

let rec dup x = match x with
    [] -> false|
    a::b -> if check_dupplicate a b then true else dup b;;

2)
let rec generate_list n_generare massimo indice = match (n_generare,massimo,indice) with
    (x,z,y) when x > y -> [Random.int massimo] @ generate_list n_generare massimo (indice+1)|
    (x,z,y) -> [];;
;;

let rec rnd_list n_generare massimo = generate_list n_generare massimo 0;;

3)

let convert_digit x = match x with 
    9 -> "9"|8 -> "8"|7 -> "7"|6 -> "6"|5 -> "5"|4 -> "4"|3 -> "3"|2 -> "2"|1->"1"|0 -> "0";;

let rec pow x y = match y with 
    _ when (x == 0 && (y == 0 || y == 1)) -> failwith "errore potenza" |
    0 -> 1|
    _ -> x*pow (x) (y-1)

let rec number_of_digits x y = match x,y with 
    (x,y) when x < 10 -> y + 1|
    (x,y) when x > 10 -> number_of_digits (x/10) (y+1);; 

let rec take_away x y k =
  if (y-k*pow(10)(x-1)) >= pow(10)(x-1) 
  then take_away x y (k+1) 
  else k;;

let rec int_to_list x = match x with
    x when x > 10 -> [(take_away (number_of_digits x 0) x 0)] @ int_to_list (x/10)|
    _ -> [x] ;;

let rec extract_digits x = match x with
    a::[] -> convert_digit a|
    a::b -> convert_digit a ^ extract_digits b;; 
;;


let rec get_infisso x = match x with 
    [] -> ""|
    a::[] -> extract_digits (int_to_list a) |
    a::b -> extract_digits (int_to_list a) ^ ";" ^ get_infisso b;;

let string_of_list x = "[" ^ get_infisso x ^ "]";;
  

string_of_list [];;
string_of_list [1];;
string_of_list [1;2;3];;
____________________________________________________________________________
4)

let g x = if x mod 2 == 0 then -x else x;;

let max_duo f x y = if f x < f y then y else x ;;
let max f a b c = max_duo f (max_duo f a b) (max_duo f b c);;

let min_duo f x y = if max_duo f x y == x then y else x;;
let min f a b c = min_duo f (min_duo f a b) (min_duo f b c);;

let rec calcola f var maxmin a b = match (a,b) with 
    (j,y) when j == y -> maxmin f a b var|
    (j,y) when j < y -> calcola f (maxmin f j y var) maxmin (j+1) y;;

let calcolatore f a b = (f (calcola f 0 min a b),f (calcola f 0 max a b)) ;;

let minmax f a b = if a <= b then calcolatore f a b else calcolatore f b a;;

max g 2 8 5;;  
min g 2 5 8;;  
minmax g 0 10;;

5)

let rec get x y z = match x,y,z with 
    (x,[],z) -> failwith "index out of bounds"|
    (x,a::b,z) when x > z -> get x b (z+1)
  | (x,a::b,z) when x == z -> a;;

let rec without x y = match (x,y) with
    (x,[]) -> []| 
    (x,a::b) when x == a -> [] @ without x b|
    (x,a::b) when x != a -> [a] @ without x b;;

let extract x y = (get x y 0,without (get x y 0) y);;

extract 0 [1;2;3];;
extract 1 [1;2;3];;
extract 2 [1;2;3];;
extract 3 [1;2;3];;
____________________________________________________________________________



6)
let check_position x y = match x with
    x when (x mod 2 == 0) -> y mod 2 == 0 |
    x when (x mod 2 == 1) -> y mod 2 == 1;;

let rec alt_supp x y = 
  if check_position x y then 
    if y > 10 then alt_supp (x+1) (y/10) 
    else check_position x y
  else false;;

let alt_even x = alt_supp 0 x;;

alt_even 1234;;
alt_even 8;;
alt_even 72;;

alt_even 3;;alt_even 51;;alt_even 8234;;

____________________________________________________________________________
7)
type 'a btree = Empty | Node of 'a * 'a btree * 'a btree;;

let rec is_bstree tree = match tree with 
    Empty -> true|
    Node(_,Empty,Empty) -> true|
    Node(num,Node(num1,j,k),Empty) -> if (compare num num1)==1 then is_bstree j && is_bstree k else false;|
    Node(num,Empty,Node(num2,j,k)) -> if (compare num2 num)==1 then is_bstree j && is_bstree k else false;|
    Node(num,Node(num1,j,k),Node(num2,z,l)) -> 
      if (compare num num1)==1 && (compare num2 num)==1 then
        is_bstree j && is_bstree k && is_bstree z && is_bstree l else false;;


let rec search_tree x tree = match tree with 
    Empty -> false|
    Node(k,Empty,Empty) -> if k==x then true else false|
    Node(num,Node(num1,j,k),Empty) -> if num==x||num1==x then true else search_tree x j || search_tree x k;|
    Node(num,Empty,Node(num2,j,k)) -> if num==x||num2==x then true else search_tree x j || search_tree x k;|
    Node(num,Node(num1,j,k),Node(num2,z,l)) -> if num==x||num2==x||num1==x then true else
        search_tree x j || search_tree x k || search_tree x z || search_tree x l;;


search_tree 20 (Node(7,
                     Node(4,
                          Node(1,Empty,Empty),
                          Node(20,Empty,Empty)),
                     Node(10,Empty,Empty)));;


____________________________________________________________________________
8) 

type suit = Spades | Hearts | Diamonds | Clubs;;
type card = Card of int * suit;;

let rec gen_type x y = match y with 
    y when y <= 10 && y >=1 -> [Card(y,x)] @ gen_type x (y+1)|
    _ -> [];;

let generator () = gen_type Spades 1 @ gen_type Hearts 1 @ gen_type Diamonds 1 @ gen_type Clubs 1;;

generator;;

let rec get x y z = match x,y,z with 
    (x,[],z) -> failwith "index out of bounds"|
    (x,a::b,z) when x > z -> get x b (z+1)
  | (x,a::b,z) when x == z -> a;;

let rec without x y = match (x,y) with
    (x,[]) -> []| 
    (x,a::b) when x == a -> [] @ without x b|
    (x,a::b) when x != a -> [a] @ without x b;;

let extract x y = (get x y 0,without (get x y 0) y);; 

let rec randomizer x num = 
  if num > 0 then match (extract ((Random.int num)) x) with (a,b) -> [a] @ randomizer b (num - 1) else match (extract 0 x) with (j,k) -> [j];;

let are_equals(a,b) = match (a,b) with (Card(j,k),Card(x,y)) -> x == j && k == y;;

let rec check value list = match list with
    [] -> false|
    (a::b) -> if are_equals(a,value) then true else check value b;;


let rec check_complete x y = match (x,y) with
    ([],_) -> true|
    (a::b,d) -> if check a d then check_complete b d else false;; 

let is_complete x = check_complete (generator ()) x ;;

let gen_deck () = randomizer (generator ()) 39 ;;

is_complete (gen_deck ());;



10)

let extract y = match y with a::b -> a;;

let rec count b v = match b with
    x::y -> if x == v then 1 + count y v else 0;;

let rec ignore_until c v = match c,v with
    (x::y::[],_) -> []|
    (x::y,0) -> y|
    (x::y,_) -> ignore_until y (v-1);;
  
let rec crush x = match x with 
    [] -> []|
    x::y -> if x == extract y then crush (ignore_until y (count y x)) else [x] @ crush y
;;
  
crush [1;1;2;1;1;3;2;1;1;1;3;3;1;1;2;3];;

