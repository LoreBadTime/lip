1)
let maxnat a b = if a >= 0 && b >= 0 then if a+0 < b+0 then b else a else failwith "Negativo" ;;

2)
let f(x) = if x < 0 then -x else x;;

3)
let f g = g 1 + 1;;

4)
let rec f x y = 
  if x y = 0 then f x (y+1)
  else x y
;;
let k l = if l < 3 then 0 else l;; 
5)

type card = Joker | Val of int;;

let win x y = match (x,y) with
    (_,Joker) -> false |
    (Joker,_) -> true | 
    (Val z, Val l) when (z < 0 && l < 0) -> failwith 'numero minore di zero'|
    (Val z, Val l) -> (z > l);;

// estrazione avviene mediante pattern matching,
per i tipi generici non bisogna inserire variabili,per derivati invece si

// ricorda che mettere due simboli separati da uno spazio significa applicare una funzione primo simbolo al secondo simbolo 
6)
let f x y = x(y + 1) + 1 ;;

7)
let is_even x = x mod 2 == 0;;

let win x y = match (x,y) with 
    (x,y) when (not(x < 0 || x > 5 ) && not (y < 0 || y > 5 )) -> if is_even (x+y) then 1 else -1 
  | (x,_) when (not(x < 0 || x > 5 )) -> 1 
  | (_,y) when (not(y < 0 || y > 5 )) -> -1
  | (_,_) -> 0;;

win 2 3

8)  
let is_posfrac (x,y) = x > 0 && y > 0 && y != 0;;

let compare_posfrac x y = match x,y with ((a,b),(c,d)) -> 
  if a*d < b*c then -1 else if a*d == b*c then 0 else 1;;
  
assert (compare_posfrac (1,2) (2,4) == 0);;
assert (compare_posfrac (1,2) (1,3) == 1);;
assert (compare_posfrac (1,2) (2,3) == -1);;
  
9)
let rec rev x = match x with
    [] -> [] | 
    a::b -> rev b @ [a] ;;
// per estrarre puntatori alla la lista si usa ::
@ concatena

10)
type 'a option = Some of 'a | None ;;

let g x = if x mod 2 == 0 then -x else x;;

let rec minfun f a b = match a,b with 
    (x,y) when x == y -> None |
    (x,y) when (x == y - 1)  -> if f x < f y then Some (f x) else Some (f y)|
    (x,y) when f x < f y -> minfun (f) (x) (y-1)|
    (x,y) when f x > f y -> minfun (f) (x+1) y|
    (x,y) when (f x == f y && x != y) -> minfun (f) (x) (y-1);;
    
    
minfun g 0 7

11)

 let rec fib_calc x = match x with 
    0 -> 0|
    1 -> 1|
    x -> fib_calc (x-2) + fib_calc (x-1);;

let rec fib x = match x with 
    0 -> []|
    x ->fib (x-1) @ [fib_calc(x)];;

fib 10;; 
  
12)
type grade = Val of int | CumLaude;;

let is_valid x = match x with 
    (Val x) -> x >= 18 && x <= 30 |
    (CumLaude) -> true |
    (_) -> false;;
let int_of_grade x = 
  if is_valid(x) then match x with 
      (Val x) -> x |
      (CumLaude) -> 32
  else failwith "fail";; 

let rec support x = match x with
    [] -> 0 |
    a::b -> a + support(b);; 
let rec counter x = match x with 
    [] -> 0 |
    a::b -> 1 + counter b ;;
let avg x = support(x)/ counter(x);;

avg [18;19;20]



13) ROBA MIA
let rec add_ones x = match x with 
    [] -> 0|
    a::b -> a + add_ones b
;;
let rec fib x = match x with 
    0 -> [0] |
    1 -> [1] | 
    x -> fib (x-1) @ [add_ones (fib (x-2) @ fib (x-1))];;

fib 5